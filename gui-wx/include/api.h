/* This file is auto-generated by cbindgen. Do not edit this file. */

#ifndef WQXTOOLS_CORE_H
#define WQXTOOLS_CORE_H

#include <cstdint>
using std::size_t;
class InputFuncBody;
class Regex;


namespace api {

enum class GvbLabelTarget {
  CurLine,
  PrevLine,
  NextLine,
};

enum class GvbSeverity {
  Warning,
  Error,
};

struct GvbDevice;

struct GvbDocument;

struct GvbVirtualMachine;

template<typename T>
struct ArrayMut {
  T *data;
  size_t len;
};

struct Utf8String {
  const char *data;
  size_t len;
};

struct Unit {
  int32_t _0;
};

template<typename E, typename T>
struct Either {
  enum class Tag {
    Left,
    Right,
  };

  struct Left_Body {
    E _0;
  };

  struct Right_Body {
    T _0;
  };

  Tag tag;
  union {
    Left_Body left;
    Right_Body right;
  };
};

using LoadConfigResult = Either<Utf8String, Unit>;

template<typename T>
struct Maybe {
  enum class Tag {
    Just,
    Nothing,
  };

  struct Just_Body {
    T _0;
  };

  Tag tag;
  union {
    Just_Body just;
  };
};

struct GvbEditorConfig {
  uint32_t font_size;
  Maybe<Utf8String> style;
};

struct GvbSimulatorConfig {
  uint32_t pixel_scale;
  uint32_t foreground;
  uint32_t background;
};

struct GvbConfig {
  GvbEditorConfig editor;
  GvbSimulatorConfig simulator;
};

struct Config {
  GvbConfig gvb;
};

using GvbInitMachineResult = Either<Utf8String, Unit>;

struct Utf8Str {
  const char *data;
  size_t len;
};

template<typename T>
struct Array {
  const T *data;
  size_t len;
};

struct Rect {
  size_t left;
  size_t top;
  size_t right;
  size_t bottom;
};

template<typename M>
struct GvbDiagnostic {
  size_t line;
  size_t start;
  size_t end;
  M message;
  GvbSeverity severity;
};

using GvbLoadDocumentResult = Either<Utf8String, GvbDocument*>;

struct Utf16Str {
  const unsigned short *data;
  size_t len;
};

struct GvbSaveError {
  Utf8String message;
  bool bas_specific;
};

using GvbSaveDocumentResult = Either<GvbSaveError, Unit>;

template<typename S>
struct GvbInsertText {
  size_t pos;
  S str;
};

struct GvbDeleteText {
  size_t pos;
  size_t len;
};

using GvbEdit = Either<GvbInsertText<Utf8Str>, GvbDeleteText>;

struct GvbReplaceChar {
  size_t start;
  size_t end;
  uint32_t ch;
};

using GvbDocSyncMachResult = Either<Utf8String, Array<GvbReplaceChar>>;

struct GvbReplaceText {
  size_t start;
  size_t end;
  Utf8String str;
};

using GvbDocMachEditResult = Either<Utf8String, GvbReplaceText>;

struct GvbAddLabelResult {
  GvbReplaceText edit;
  Maybe<size_t> goto_;
};

using GvbDocLabelEditResult = Either<Utf8String, GvbAddLabelResult>;

struct GvbDocRelabelError {
  enum class Tag {
    LabelOverflow,
    LabelNotFound,
  };

  struct LabelOverflow_Body {
    uint32_t _0;
  };

  struct LabelNotFound_Body {
    size_t start;
    size_t end;
    uint16_t label;
  };

  Tag tag;
  union {
    LabelOverflow_Body label_overflow;
    LabelNotFound_Body label_not_found;
  };
};

using GvbDocRelabelResult = Either<GvbDocRelabelError, Array<GvbReplaceText>>;

using GvbInputFuncBody = InputFuncBody;

struct GvbCompileFnBodyResult {
  /// may be null
  GvbInputFuncBody *body;
  Array<GvbDiagnostic<Utf8String>> diagnostics;
};

struct GvbKeyboardInputType {
  enum class Tag {
    String,
    Integer,
    Real,
    Func,
  };

  struct Func_Body {
    Utf8String name;
    Utf8String param;
  };

  Tag tag;
  union {
    Func_Body func;
  };
};

struct GvbLocation {
  size_t line;
  size_t start_column;
  size_t end_column;
};

struct GvbExecResult {
  enum class Tag {
    End,
    Continue,
    /// nanoseconds
    Sleep,
    KeyboardInput,
    InKey,
    Error,
  };

  struct Sleep_Body {
    uint64_t _0;
  };

  struct KeyboardInput_Body {
    Maybe<Utf8String> prompt;
    /// Fields may be empty. If so, resume execution immediately.
    Array<GvbKeyboardInputType> fields;
  };

  struct Error_Body {
    GvbLocation location;
    Utf8String message;
  };

  Tag tag;
  union {
    Sleep_Body sleep;
    KeyboardInput_Body keyboard_input;
    Error_Body error;
  };
};

struct GvbReal {
  double _0;
};

struct GvbKeyboardInput {
  enum class Tag {
    Integer,
    Real,
    String,
    Func,
  };

  struct Integer_Body {
    int16_t _0;
  };

  struct Real_Body {
    GvbReal _0;
  };

  struct String_Body {
    Array<uint8_t> _0;
  };

  struct Func_Body {
    GvbInputFuncBody *_0;
  };

  Tag tag;
  union {
    Integer_Body integer;
    Real_Body real;
    String_Body string;
    Func_Body func;
  };
};

struct GvbExecInput {
  enum class Tag {
    None,
    KeyboardInput,
    Key,
  };

  struct KeyboardInput_Body {
    Array<GvbKeyboardInput> _0;
  };

  struct Key_Body {
    uint8_t _0;
  };

  Tag tag;
  union {
    KeyboardInput_Body keyboard_input;
    Key_Body key;
  };
};

using GvbStopVmResult = Either<Utf8String, Unit>;

struct GvbStringError {
  enum class Tag {
    InvalidUtf16,
    InvalidChar,
  };

  struct InvalidChar_Body {
    size_t _0;
    uint32_t _1;
  };

  Tag tag;
  union {
    InvalidChar_Body invalid_char;
  };
};

using GvbStringResult = Either<GvbStringError, Array<uint8_t>>;

struct GvbValue {
  enum class Tag {
    Integer,
    Real,
    String,
  };

  struct Integer_Body {
    int16_t _0;
  };

  struct Real_Body {
    GvbReal _0;
  };

  struct String_Body {
    Array<uint8_t> _0;
  };

  Tag tag;
  union {
    Integer_Body integer;
    Real_Body real;
    String_Body string;
  };
};

struct GvbBinding {
  enum class Tag {
    Var,
    Array,
  };

  struct Var_Body {
    Utf8String name;
    GvbValue value;
  };

  struct Array_Body {
    Utf8String name;
    Array<uint16_t> dimensions;
  };

  Tag tag;
  union {
    Var_Body var;
    Array_Body array;
  };
};

struct GvbDimensionValues {
  enum class Tag {
    Integer,
    Real,
    String,
  };

  struct Integer_Body {
    ArrayMut<int16_t> _0;
  };

  struct Real_Body {
    ArrayMut<GvbReal> _0;
  };

  struct String_Body {
    ArrayMut<Array<uint8_t>> _0;
  };

  Tag tag;
  union {
    Integer_Body integer;
    Real_Body real;
    String_Body string;
  };
};

extern "C" {

void destroy_i16_array_mut(ArrayMut<int16_t> arr);

LoadConfigResult load_config();

const Config *config();

GvbInitMachineResult gvb_init_machines();

Array<Utf8Str> gvb_machine_names();

void gvb_destroy_device(GvbDevice *dev);

const uint8_t *gvb_device_graphics_memory(GvbDevice *dev);

void gvb_device_reset(GvbDevice *dev);

void gvb_device_fire_key_down(GvbDevice *dev, uint8_t key);

void gvb_device_fire_key_up(GvbDevice *dev, uint8_t key);

void gvb_device_blink_cursor(GvbDevice *dev);

Maybe<Rect> gvb_device_screen_dirty_area(GvbDevice *dev);

void gvb_destroy_string_diagnostic_array(Array<GvbDiagnostic<Utf8String>> arr);

void gvb_destroy_str_diagnostic_array(Array<GvbDiagnostic<Utf8Str>> arr);

GvbLoadDocumentResult gvb_load_document(Utf16Str path);

GvbDocument *gvb_create_document();

GvbSaveDocumentResult gvb_save_document(GvbDocument *doc, Utf16Str path);

GvbDevice *gvb_document_device(GvbDocument *doc, Utf16Str data_dir);

Maybe<GvbVirtualMachine*> gvb_document_vm(GvbDocument *doc, GvbDevice *device);

void gvb_document_apply_edit(GvbDocument *doc, GvbEdit edit);

Array<GvbDiagnostic<Utf8Str>> gvb_document_diagnostics(GvbDocument *doc);

void gvb_destroy_document(GvbDocument *doc);

Utf8Str gvb_document_text(GvbDocument *doc);

Utf8Str gvb_document_machine_name(GvbDocument *doc);

GvbDocSyncMachResult gvb_document_sync_machine_name(GvbDocument *doc);

GvbDocMachEditResult gvb_document_machine_name_edit(GvbDocument *doc,
                                                    Utf8Str name);

void gvb_destroy_replace_text(GvbReplaceText rep);

void gvb_destroy_replace_char_array(Array<GvbReplaceChar> reps);

GvbDocLabelEditResult gvb_document_add_label_edit(GvbDocument *doc,
                                                  GvbLabelTarget target,
                                                  size_t position);

GvbDocRelabelResult gvb_document_relabel_edits(GvbDocument *doc,
                                               uint16_t start,
                                               uint16_t inc);

void gvb_destroy_replace_text_array(Array<GvbReplaceText> edits);

void gvb_destroy_vm(GvbVirtualMachine *vm);

GvbCompileFnBodyResult gvb_compile_fn_body(const GvbVirtualMachine *vm,
                                           Utf16Str input);

void gvb_destroy_fn_body(GvbInputFuncBody *body);

GvbExecResult gvb_vm_exec(GvbVirtualMachine *vm,
                          GvbExecInput input,
                          size_t steps);

GvbStopVmResult gvb_vm_stop(GvbVirtualMachine *vm);

void gvb_vm_reset(GvbVirtualMachine *vm);

void gvb_reset_exec_result(GvbExecResult *result);

void gvb_reset_exec_input(GvbExecInput *input);

/// memory of `GvbKeyboardInput`s in `data` is consumed.
Array<GvbKeyboardInput> gvb_new_input_array(const GvbKeyboardInput *data,
                                            size_t len);

/// memory of `GvbKeyboardInput`s in `data` is consumed.
void gvb_destroy_input_array(Array<GvbKeyboardInput> input);

/// Returns if a key was pressed.
bool gvb_assign_device_key(GvbDevice *device, GvbExecInput *input);

GvbStringResult gvb_utf16_to_byte_string(const GvbVirtualMachine *vm,
                                         Utf16Str s);

/// memory of `s` is not consumed.
Utf8String gvb_byte_string_to_utf8_lossy(const GvbVirtualMachine *vm,
                                         Array<uint8_t> s);

void gvb_destroy_value(GvbValue value);

ArrayMut<GvbBinding> gvb_vm_bindings(const GvbVirtualMachine *vm);

void gvb_destroy_bindings(ArrayMut<GvbBinding> *bindings);

/// memory of `value` is consumed.
void gvb_vm_modify_var(GvbVirtualMachine *vm, Utf8Str name, GvbValue value);

GvbDimensionValues gvb_vm_arr_dim_values(const GvbVirtualMachine *vm,
                                         Utf8Str name,
                                         Array<uint16_t> subs,
                                         size_t dim);

void gvb_destroy_real_array_mut(ArrayMut<GvbReal> arr);

/// memory of `subs` is managed by C++ code.
///
/// memory of `value` is consumed.
void gvb_vm_modify_arr(GvbVirtualMachine *vm,
                       Utf8Str name,
                       Array<uint16_t> subs,
                       GvbValue value);

void destroy_string(Utf8String str);

Array<uint8_t> copy_byte_string(Array<uint8_t> arr);

void destroy_byte_string(Array<uint8_t> arr);

void destroy_byte_string_array_mut(ArrayMut<Array<uint8_t>> arr);

void destroy_str_array(Array<Utf8Str> arr);

Maybe<bool> is_new_version(Utf8Str ver);

Utf8Str version();

} // extern "C"

} // namespace api

#endif // WQXTOOLS_CORE_H
