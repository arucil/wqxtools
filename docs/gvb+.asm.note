floating point format:
    byte0          exponent
    byte1  bit7    sign
           bit0-6  higher mantissa
    byte2          mantissa
    byte3          mantissa
    byte4          lower mantissa

    if exponent is 0, the number is zero, regardless of the mantissa and sign.

subroutine:

    6634    increment ($5E, $5F) and read a character into A, ignoring spaces
                C = if A is not digit
                Z = if A is $00 or ':'
    663A    read a character into A, ignoring spaces
                C = if A is not digit
                Z = if A is $00 or ':'
    675F    make sure stack has enough space
    679D    out of memory error
    679F    report error, X = error code
    684A    close all files opend by OPEN statements
    6634    increment ($5E, $5F) and read a character into A, space is not ignored
                C = if A is not digit
    7676    find next unquoted ':' or $00
                Y = offset of next unquoted ':' or $00
    7679    find next $00
                Y = offset of next $00
    7D2C    evaluate expression and assert result is number (float or int)
    7DE5    assert current mode is not direct mode (interactive mode), otherwise
                report "illegal direct" error
    85C4    evaluate expression and assert result is in 0~255
                X = result
    918E    syntax error
    9999    report illegal quantity error
    9B43    C = if A is uppercase
    9B4D    C = if A is not digit
    9B58    read an identifier and store it in space starting with $B8DB,
                Y = length of identifier
                ($5E, $5F) = address before identifier
    9B7A    evaluate expression
    9C40    push FAC1 mantissa and exponent onto stack and go to ($44, $45)
    9CF4    make sure the current token is equal to A, and then read a character
                (call $6634)
    9CFD    syntax error
    9ED5    overflow error
    A095    multiply FAC1 by 10
    A166    unpack float in (A, Y) into FAC1
    A199    round FAC1 then store FAC1 into (X, Y)
    A1C2    copy FAC2 into FAC1
    A1E3    round FAC1
    A1D3    round FAC1 and then copy FAC1 into FAC2
                A = exponent of FAC1
    A1F4    get sign of FAC1 in A
                $00 = 0
                $01 = positive
                $FF = negative
    A23A    compare FAC1 with (A, Y)
    ACE2    clear screen and text buffer
    ACF2    clear bottom text row on screen and in text buffer
    AD06    clear screen
    AD32    clear bottom text row on screen

data:
    $B808   variable type flag, $00 = numeric, $FF = string

    $B809   variable type flag, $00 = float, $80 = integer

    $B80B
            bit7   is executing subscript, FOR, or FN

    $B811
            TRACE flag, #$00 or #$80

    $B814, $B815
            current line number

    $6F     exponent of FAC1 (float accumulator 1)

    $70-$73
            mantissa of FAC1 (including assumed leading 1)

    $74     sign of FAC1 (bit7)

    $B80E   extra mantissa of FAC1

    $77     exponent of FAC2

    $78-$7B
            mantissa of FAC2 (including assuming bit)

    $7C     sign of FAC2 (bit7)

    $B960   extra mantissa of FAC2

    $7D     sign of FAC1 xor sign of FAC2

    $B94D  FAC1 overflow byte

    $B94E
            bit7   if .BAS file is greater than 8KB

    $BA8D, $BA8E
            end address of .BAS file content

    $5E, $5F
            address of current character

    $B8C9, $B8CA
            starting address of variable table

    $B8CF, $B8D0
            bottom of string stack

    $B8BB-$B8BF
            random number seed (float)

    $B951, $B952
            first line number of current chunk of the .BAS file

    $B953, $B954
            last line number of current chunk of the .BAS file
            
    $42     string operand stack pointer

    $49-$51
            string operand stack, 3 items, each item is:
                1 byte    string length
                2 bytes   string content pointer

    $B968
            bit7   = 0    TEXT mode
                   = 1    GRAPH mode

    $B812
            = 0    NORMAL mode
            = 1    INVERSE mode
            = 2    FLASH mode

    $B8D5, $B8D6
            DATA pointer

    $B95E
            $4C (JMP)

    $B92B-$B937 (13 bytes)
            INVERSE / FLASH flag for all characters (100bit),
            for example, bit7 in the first byte indicates that first character
            in text buffer is in INVERSE / FLASH mode, bit6 is second character, etc.
            $B937 only highest 4bits are used.

    $B8C4
            keyboard INPUT mode
            = 0  insert mode
            = 1  replace mode

    $B80C
            READ mode
            = $98  READ from DATA
            = $00  READ from keyboard

TODO:
    .BAS 文件结构
    数字可以用 E 开头？
    取整？truncate
    0~255 负数取补码？no
    READ、字面值、INPUT 的数字都支持空格？

----------------------------------------------------
未明用途的地址：

$B98F, $B990  = $2000
$B991, $B992  = $6000
$B993, $B994  = $BD00
$B995, $B996  = $BF00
$B8D9 ~ $B92A = 0
$B804  = 0
$B8D1, $B8D2  = $6000
$B8C7, $B8C8  = end of .BAS chunk
$B8CD, $B8CE  = end of .BAS chunk
$B8CB, $B8CC  = end of .BAS chunk
$B8C4  = 0
$B810  = 0
$B938 ~ 13bytes = FLASH mode ? never used
$B8D4  = 0

INPUT:
b829 (47 bytes)
b858 (95 bytes)  prompt buffer
b8c6 = 0
b8c1  input prompt 离 input prompt 开头所在开头行的距离
b8c2  光标离 input prompt 开头所在行开头的距离
b8c3  输入的内容末尾离 input prompt 开头所在行开头的距离

----------------------------------
variable table
entry:
        byte0   bit7,bit6  = 11 int
                           = 00 float
                           = 01 str
                           = 10 function ?
                bit0~bit3  variable length - 1
        N bytes            variable name
        data               if subscript / FOR / FN, 5 bytes
                           if float, 5 bytes
                           if str, 3 bytes   (string length, string pointer)
                           if int, 2 bytes
                           if function, 5 bytes:
                                2 bytes    function body pointer
                                2 bytes    function parameter variable data pointer
                                1 byte     first token of function body (dummy)

----------------------------------
control flow stack
item:  (from high address to low address)
    FOR loop:  (20 bytes)
        2 bytes            offset of chunk
        2 bytes            starting pointer of FOR loop body
        2 bytes            line number of FOR statement
        5 bytes            loop end number (float)
        1 byte             sign of step number
        5 bytes            step number (float)
        2 bytes            loop variable data pointer
        1 byte             $81, the 'FOR' token
    GOSUB:  (7 bytes)
        2 bytes            offset of chunk
        2 bytes            pointer of line number following the GOSUB token
        2 bytes            line number of GOSUB statement
        1 byte             $91, the 'GOSUB' token
    WHILE: (7 bytes)
        2 bytes            offset of chunk
        2 bytes            starting pointer of WHILE loop body
        2 bytes            line number of WHILE statement
        1 byte             $BB, the 'WHILE' token
